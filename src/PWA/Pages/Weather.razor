@using Models;

@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<section>
    <div class="container mx-auto">
        <p>This component demonstrates adding, fetching data from the server.</p>
        <input type="number" @bind="myTemp" />
        <input type="text" @bind="mySummary" />
        <input type="date" @bind="myDateTime" />
    </div>
</section>

<button @onclick="AddWeatherForecast" class="btn">
    Add Weather Forecast
</button>

@if (forecasts == null)
{
    <p><em>No Forecasts Exist.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.DateTime.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    public DateTime myDateTime { get; set; }

    public int myTemp { get; set; } = 65;
    public string mySummary { get; set; } = "Warm";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7092/weatherforecast?GetWeatherForecast");
    }

    public async Task AddWeatherForecast()
    {
        WeatherForecast myWeatherForecast = new WeatherForecast() { DateTime = myDateTime, TemperatureC = myTemp, Summary = mySummary };

        await Http.PostAsJsonAsync("https://localhost:7092/weatherforecast?AddWeatherForecast", myWeatherForecast);
    }
}
