@using Models;
@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">Weather</h1>

        <section class="bg-white rounded-lg shadow-sm p-6 mb-8">
            <div class="space-y-4">
                <p class="text-gray-600">This component demonstrates adding and fetching data from the server.</p>

                <div class="flex flex-col sm:flex-row gap-4">
                    <input type="number"
                           @bind="myTemp"
                           class="px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />

                    <select @bind="mySummary"
                            class="px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        @foreach (var summary in Summaries)
                        {
                            <option value="@summary">@summary</option>
                        }
                    </select>

                    <input type="date"
                           @bind="myDateTime"
                           class="px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />

                    <button @onclick="AddWeatherForecast"
                            class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        Add Weather Forecast
                    </button>
                </div>
            </div>
        </section>

        @if (forecasts == null)
        {
            <p class="text-gray-500 italic">No Forecasts Exist.</p>
        }
        else
        {
            <section class="bg-white rounded-lg shadow-sm overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" aria-label="Temperature in Celsius">Temp. (C)</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" aria-label="Temperature in Fahrenheit">Temp. (F)</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Summary</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var forecast in forecasts)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@forecast.DateTime.ToShortDateString()</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@forecast.TemperatureC</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@forecast.TemperatureF</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@forecast.Summary</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </section>
        }
    </div>
</div>

@code {
    private WeatherForecast[]? forecasts;
    public DateTime myDateTime { get; set; }
    public int myTemp { get; set; } = 65;
    public string mySummary { get; set; } = "Warm";
    public List<string> Summaries = new List<string> { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

    protected override async Task OnInitializedAsync()
    {
        await GetForecasts();
    }

    public async Task GetForecasts()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7092/weatherforecast?GetWeatherForecast");
    }

    public async Task AddWeatherForecast()
    {
        WeatherForecast myWeatherForecast = new WeatherForecast() { DateTime = myDateTime, TemperatureC = myTemp, Summary = mySummary };
        await Http.PostAsJsonAsync("https://localhost:7092/weatherforecast?AddWeatherForecast", myWeatherForecast);
        await GetForecasts();
    }
}